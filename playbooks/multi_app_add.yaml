---
- name: Append new app to tenant
  # Master version
  #  hosts: bigip     # this refers to inventory on tower
  hosts: localhost    
  gather_facts: false
  connection: local
    
  vars:
    uri_method: "POST"
    # default 'empty' application var to be used when first creating a new tenant
    applications: []
    # temp vars for local testing only - these will come from tower
    tower_action: add
    tower_bigip: "local-lab"
    tower_tenant: "planets"
    tower_app_name: mars
    tower_app_template: http
    tower_app_vs_ip: 1.1.3.2
    tower_app_members:
      - 1.1.3.21
      - 1.1.3.22
      - 1.1.3.23

  tasks:

  - name: format new variables from tower into nested list
    set_fact:

      format_new_app: [{	"app_name": "{{ tower_app_name }}","bigip": "{{ tower_bigip }}","template": "{{ tower_app_template }}","vs_ip": "{{ tower_app_vs_ip }}","members": "{{ tower_app_members }}"}]

  - name: Check for tenant file and create if it doesn't exist
    file:
      path: "../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml"
      state: touch

  - name: get existing tenant vars 
    include_vars:
      file: '../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml'

  - name: list all vars after getting existing tenant vars
    debug:
      msg: "{{ vars }}"

  - name: write existing 'applications' *** BEFORE *** 
    debug:
      msg: "write existing 'applications' {{ applications }} *** BEFORE *** "

  - name: check existing tenant vars, and if empty, set to equal the new ones.
    set_fact:
      applications: "{{ format_new_app }}"
    when: '"{{ applications }}" == ""'

  - name: write existing 'applications' *** AFTER *** 
    debug:
      msg: "write existing 'applications' {{ applications }} *** AFTER *** "

  - name: get number of existing apps in tenant 
    set_fact:
      existing_apps_length: "{{ applications|length }}"

  - name: merge new_app into existing tenant apps
    set_fact:
      new_applications: '{{ applications | union(format_new_app) }}'
  
  - name: get number of existing + new apps in tenant 
    set_fact:
      new_apps_length: "{{ new_applications|length }}"

  - name: render template
    set_fact:
      tenant_body: "{{ lookup('template', '../j2/multi_app_macro.j2', split_lines=False) }}"

# debug all variables and number of existing and new apps.

  - name: list all vars after template render
    debug:
      msg: "{{ vars }}"

  - name: write the number of existing apps for debug
    debug:
      msg: "number of existing apps = {{ existing_apps_length }}"

  - name: write the number of existing + new apps for debug
    debug:
      msg: "number of existing + new apps = {{ new_apps_length }}"

# Deploy the AS3 declaration to the destination device(s)

  - name: URI POST AS3 to ADD to BIG-IP '{{ tower_bigip }}', tenant '{{ tower_tenant }}'
    uri:
       #url: "https://{{ inventory_hostname }}/mgmt/shared/appsvcs/declare"
       # temporary for local testing
       url: "https://10.1.1.245/mgmt/shared/appsvcs/declare"
       method: "{{ uri_method }}"
       #user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
       #password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
       # temporary for local testing
       user: "admin"
       password: "admin"
       validate_certs: no
       body: "{{ tenant_body }}"
       body_format: json

# After AS3 is successfully deployed, update the source of truth

  - name: write new source of truth variables to the tenant file in local clone of the repo
    copy:
      content: "{{ { 'applications': new_applications } | to_nice_yaml() }}"
      dest: '../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml'

  - name: add tenant file to local repo (just in case it's new and isn't there already)
    shell: git add '../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml'
  
  - name: commit the update to the local repo 
    shell: git commit -a -m 'update ../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml'
    register: command_result
    failed_when: "'fail' in command_result.stdout"

  - name: debug output from git commit command
    debug:
      msg: "git returned = {{ command_result.stdout }}"
  
  - name: push the update of the local repo to git
    shell: git push  
  

  

  
